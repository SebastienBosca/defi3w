{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","accounts","contract","ListVoters","win","componentWillMount","eth","getAccounts","Voting","networks","instance","Contract","abi","setState","runInit","alert","error","methods","getRegVoters","call","getStatus","status","getSessionNumber","session","NextStep","parseInt","getNombreProp","propnumber","getProp","props","getWinner","Next","NextStepS","changeStatus","send","from","address","value","Register","PROPO","propo","RegisterProposal","VOTE","vote","RegisterVote","this","className","style","display","justifyContent","Card","width","Header","Body","ListGroup","variant","Item","Table","striped","bordered","hover","map","Form","Group","controlId","Control","type","id","ref","input","Button","onClick","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c8d1392f.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;\n","import React, { Component } from \"react\";\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport Card from 'react-bootstrap/Card';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Table from 'react-bootstrap/Table';\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\"; \n\nclass App extends Component {\n  state = { web3: null, accounts: null, contract: null, ListVoters: null, win: [] };\n\n  componentWillMount = async () => {\n    try {\n      // Récupérer le provider web3\n      const web3 = await getWeb3();\n  \n      // Utiliser web3 pour récupérer les comptes de l’utilisateur (MetaMask dans notre cas) \n      const accounts = await web3.eth.getAccounts();\n\n      // Récupérer l’instance du smart contract “ListVoters” avec web3 et les informations du déploiement du fichier (client/src/contracts/ListVoters.json)\n      const deployedNetwork = Voting.networks[3];\n  \n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        \"0x308965Ca5e00300c18FCF5c743a121e574E083E9\", \n      );\n \n      this.setState({ web3, accounts, contract: instance }, this.runInit);\n    } catch (error) {\n      // Catch any errors for any of the above operations.\n      alert(\n        `Non-Ethereum browser detected. Can you please try to install MetaMask before starting.`,\n      );\n      console.error(error);\n    }\n  };\n\n  runInit = async() => {\n    const { accounts, contract } = this.state;\n  \n    // récupérer la liste des comptes enregistrés\n    const ListVoters = await contract.methods.getRegVoters().call();\n   \n    // récupérer le numéro de statut\n    const status = await contract.methods.getStatus().call();\n\n    // récupérer le numéro de session\n    const session = await contract.methods.getSessionNumber().call();\n \n    // calculer le numéro de la prochaine étape\n    const NextStep = parseInt(status)+1-(status==5)*6;\n\n    // récupérer le nombre de propositions\n    const propnumber = await contract.methods.getNombreProp().call();\n\n    //récupérer la liste des propositions\n    const props = await contract.methods.getProp().call();\n     \n    // récupérer les gagnants \n    const win = await contract.methods.getWinner().call();\n \n\n\n    // Mettre à jour le state \n   this.setState({ ListVoters:ListVoters, session:session, propnumber:propnumber, props:props, status:status, NextStep:NextStep, win:win});\n  }; \n\n//Changer le statut et passer à l'étape suivante\n\n  Next = async() => {\n    const { accounts, contract, NextStep } = this.state;\n    const NextStepS = this.state.NextStep;   //new BN(..)  //new BigNumber(this.NextStep);\n  await contract.methods.changeStatus(NextStepS).send({from: accounts[0]});\n  this.runInit();\n}\n  \n  ListVoters = async() => {\n    const { accounts, contract } = this.state;\n    const address = this.address.value;\n    \n    // Interaction avec le smart contract pour ajouter un compte \n    await contract.methods.Register(address).send({from: accounts[0]});\n    // Récupérer la liste des comptes autorisés\n    this.runInit();\n  }\n \n  PROPO = async() => {\n    const { accounts, contract } = this.state;\n    const propo = this.propo.value;\n    \n    // Interaction avec le smart contract pour ajouter une proposition\n    await contract.methods.RegisterProposal(propo).send({from: accounts[0]});\n    // Récupérer la liste des comptes autorisés\n    this.runInit();\n  }\n\n  VOTE = async() => {\n    const { accounts, contract } = this.state;\n    const vote = this.vote.value;\n    \n    // Interaction avec le smart contract pour ajouter une proposition\n    await contract.methods.RegisterVote(vote).send({from: accounts[0]});\n    // Récupérer la liste des comptes autorisés\n    this.runInit();\n  }\n\n \n\n\n\n\n\n\n\n  render() {\n    const { ListVoters } = this.state;\n    const { props } = this.state;\n    const { win } = this.state;\n   \n    if (!this.state.web3) {\n      return <div>Loading Web3, accounts, and contract...</div>;\n    }\n\n\n    if (this.state.status==0) {\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de vote</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Session de vote n° {this.state.session}  </strong></Card.Header>\n            <Card.Header><strong>Etape 1: enregistrement des votants </strong></Card.Header>\n            <Card.Header><strong>Liste des adresses enregistrées pour le vote:</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {ListVoters !== null && \n                        ListVoters.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Le propriétaire peut enregistrer une nouvelle adresse:</strong></Card.Header>\n            <Card.Body>\n              <Form.Group controlId=\"formAddress\">\n                <Form.Control type=\"text\" id=\"address\"\n                ref={(input) => { this.address = input }}\n                />\n              </Form.Group>\n              <Button onClick={ this.ListVoters } variant=\"dark\" > Enregistrer </Button>\n            </Card.Body>\n          </Card>\n          </div>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Le propriétaire peut passer à l'étape suivante:</strong></Card.Header>\n            <Card.Body>\n            <Button onClick={ this.Next } variant=\"dark\" > Etape Suivante </Button>\n            </Card.Body>\n          </Card>\n          </div>\n        <br></br>\n      </div>\n    );\n}\n\nif (this.state.status==1) {\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de vote</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Session de vote n° {this.state.session}  </strong></Card.Header>\n            <Card.Header><strong>Etape 2: enregistrement des propositions </strong></Card.Header>\n            <Card.Header><strong>Liste des propositions enregistrées:</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {props !== null && \n                       props.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Les votants peuvent enregistrer une nouvelle proposition:</strong></Card.Header>\n            <Card.Body>\n              <Form.Group controlId=\"formAddress\">\n                <Form.Control type=\"text\" id=\"propo\"\n                ref={(input) => { this.propo = input }}\n                />\n              </Form.Group>\n              <Button onClick={ this.PROPO } variant=\"dark\" > Enregistrer </Button>\n            </Card.Body>\n          </Card>\n          </div>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Le propriétaire peut passer à l'étape suivante:</strong></Card.Header>\n            <Card.Body>\n            <Button onClick={ this.Next } variant=\"dark\" > Etape Suivante </Button>\n            </Card.Body>\n          </Card>\n          </div>\n        <br></br>\n      </div>\n    );\n}\n\nif (this.state.status==2) {\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de vote</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Session de vote n° {this.state.session}  </strong></Card.Header>\n            <Card.Header><strong>Etape 3: l'enregistrement des propositions est terminé, en voici la liste finale: </strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {props !== null && \n                       props.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}> \n          </Card>\n          </div>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Le propriétaire peut passer à l'étape suivante:</strong></Card.Header>\n            <Card.Body>\n            <Button onClick={ this.Next } variant=\"dark\" > Etape Suivante </Button>\n            </Card.Body>\n          </Card>\n          </div>\n        <br></br>\n      </div>\n    );\n}\n\nif (this.state.status==3) {\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de vote</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Session de vote n° {this.state.session}  </strong></Card.Header>\n            <Card.Header><strong>Etape 4: Début du Vote </strong></Card.Header>\n            <Card.Header><strong>Liste des propositions:</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      { props !== null && \n                        props.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Voter pour la proposition n°:</strong></Card.Header>\n            <Card.Body>\n              <Form.Group controlId=\"formAddress\">\n                <Form.Control type=\"text\" id=\"vote\"\n                ref={(input) => { this.vote = input }}\n                />\n              </Form.Group>\n              <Button onClick={ this.VOTE } variant=\"dark\" > Enregistrer </Button>\n            </Card.Body>\n          </Card>\n          </div>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Le propriétaire peut passer à l'étape suivante:</strong></Card.Header>\n            <Card.Body>\n            <Button onClick={ this.Next } variant=\"dark\" > Etape Suivante </Button>\n            </Card.Body>\n          </Card>\n          </div>\n        <br></br>\n      </div>\n    );\n}\n\nif (this.state.status==4) {\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de vote</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Session de vote n° {this.state.session}  </strong></Card.Header>\n            <Card.Header><strong>Etape 5: Fin du Vote </strong></Card.Header>\n            <Card.Header><strong>Liste des propositions:</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {props !== null && \n                        props.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n          <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Le propriétaire peut passer à l'étape suivante:</strong></Card.Header>\n            <Card.Body>\n            <Button onClick={ this.Next } variant=\"dark\" > Etape Suivante </Button>\n            </Card.Body>\n          </Card>\n          </div>\n        <br></br>\n      </div>\n    );\n}\n\nif (this.state.status==5) {\n    return (\n      <div className=\"App\">\n        <div>\n            <h2 className=\"text-center\">Système de vote</h2>\n            <hr></hr>\n            <br></br>\n        </div>\n        <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Session de vote n° {this.state.session}  </strong></Card.Header>\n            <Card.Header><strong>Etape 6: Publication des résultats </strong></Card.Header>\n            <Card.Header><strong>Liste des propositions:</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {props !== null && \n                        props.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        <br></br>\n <div style={{display: 'flex', justifyContent: 'center'}}>\n        <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>La ou les propositions gagnantes ont le ou les n°:</strong></Card.Header>\n            <Card.Body>\n              <ListGroup variant=\"flush\">\n                <ListGroup.Item>\n                  <Table striped bordered hover>\n                    <thead>\n                      <tr>\n                        <th>@</th>\n                      </tr>\n                    </thead>\n                    <tbody>\n                      {win !== null && \n                        win.map((a) => <tr><td>{a}</td></tr>)\n                      }\n                    </tbody>\n                  </Table>\n                </ListGroup.Item>\n              </ListGroup>\n            </Card.Body>\n          </Card>\n        </div>\n        \n          <div style={{display: 'flex', justifyContent: 'center'}}>\n          <Card style={{ width: '50rem' }}>\n            <Card.Header><strong>Le propriétaire peut passer à l'étape suivante:</strong></Card.Header>\n            <Card.Body>\n            <Button onClick={ this.Next } variant=\"dark\" > Etape Suivante </Button>\n            </Card.Body>\n          </Card>\n          </div>\n        <br></br>\n      </div>\n    );\n}\n\nelse return null\n\n\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}